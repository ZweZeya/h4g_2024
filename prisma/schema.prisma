// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // fields
  id                 Int                 @id @default(autoincrement())
  email              String              @unique @db.VarChar(100)
  hashPassword       String              @db.VarChar(100)
  // relation - mandatory cos prisma
  volunteer          Volunteer?
  organisation       Organisation?
  admin              Admin?
  inboxNotifications InboxNotification[]

  @@unique(fields: [email, hashPassword], name: "account_details")
  @@map("user")
}

model Admin {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int    @unique
  name   String @db.VarChar(100)

  @@map("admin")
}

model Volunteer {
  // fields
  id           Int           @id @default(autoincrement())
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int           @unique
  name         String        @db.VarChar(100)
  mobileNumber String
  bday         DateTime
  address      String?       @db.VarChar(255)
  availability Availability
  // relations - mandatory cos prisma
  enrollments  Enrollment[]
  certificates Certificate[]

  @@map("volunteer")
}

enum Availability {
  WEEKDAYS
  WEEKEND
  ANY
}

model Organisation {
  // fields
  id           Int     @id @default(autoincrement())
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int     @unique
  name         String  @db.VarChar(100)
  mobileNumber String
  // relations - mandatory cos prisma
  events       Event[]

  @@map("organisation")
}

model Event {
  // fields
  id             Int          @id @default(autoincrement())
  organisation   Organisation @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  organisationId Int
  name           String       @db.VarChar(100)
  location       String?
  maxVolunteers  Int
  startDate      DateTime
  endDate        DateTime
  // relations - mandatory cos prisma
  enrollments    Enrollment[]

  @@map("event")
}

model Enrollment {
  id          Int              @id @default(autoincrement())
  volunteer   Volunteer        @relation(fields: [volunteerId], references: [id], onDelete: Cascade)
  volunteerId Int
  event       Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     Int
  status      EnrollmentStatus @default(PENDING)

  @@map("enrollment")
}

enum EnrollmentStatus {
  PENDING
  REJECTED
  ASSIGNED
  COMPLETED
}

model Certificate {
  // fields
  id          Int       @id @default(autoincrement())
  volunteer   Volunteer @relation(fields: [volunteerId], references: [id], onDelete: Cascade)
  volunteerId Int
}

model InboxNotification {
  // fields
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  message String @db.VarChar(255)
}
